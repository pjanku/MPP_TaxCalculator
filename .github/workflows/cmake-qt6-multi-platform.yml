name: CMake and Qt6.8+ LTS CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Qt and other dependencies based on the operating system
      # Linux (Ubuntu) - Install Qt 6.8 LTS
      - name: Install dependencies on Ubuntu
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y wget build-essential cmake
          # Download and install Qt 6.8 using Qt installer
          wget https://download.qt.io/official_releases/online_installers/qt-unified-linux-x64-online.run -O qt-installer.run
          chmod +x qt-installer.run
          ./qt-installer.run --accept-licenses --no-force-installations -q --platform minimal --outputdir /opt/qt --target-version 6.8
          echo "CMAKE_PREFIX_PATH=/opt/qt/6.8/gcc_64" >> $GITHUB_ENV

      # macOS - Install Qt 6.8 LTS using Homebrew
      - name: Install dependencies on macOS
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install cmake
          # Install Qt 6.8 LTS
          brew install qt@6.8
          echo "CMAKE_PREFIX_PATH=$(brew --prefix qt@6.8)" >> $GITHUB_ENV

      # Windows - Install Qt 6.8 LTS using Chocolatey or Qt installer
      - name: Install dependencies on Windows
        if: runner.os == 'Windows'
        run: |
          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' -y
          # Download and install Qt 6.8 using Qt online installer
          choco install qt --version 6.8 -y
          echo "CMAKE_PREFIX_PATH=C:\\Qt\\6.8.0\\msvc2019_64" >> $GITHUB_ENV

      # Create a build directory
      - name: Create Build Directory
        run: mkdir build

      # Configure with CMake based on platform
      - name: Configure with CMake on Linux and macOS
        if: runner.os != 'Windows'
        run: |
          cmake -S . -B build -G "Unix Makefiles" -DCMAKE_PREFIX_PATH=$CMAKE_PREFIX_PATH

      - name: Configure with CMake on Windows
        if: runner.os == 'Windows'
        run: |
          cmake -S . -B build -G "NMake Makefiles" -DCMAKE_PREFIX_PATH=$env:CMAKE_PREFIX_PATH

      # Build the project
      - name: Build the project
        run: cmake --build build

      # Optionally run tests (if any)
      - name: Run tests
        run: |
          cd build && ctest

      # Package on Linux (optional step)
      - name: Package application on Linux
        if: runner.os == 'Linux'
        run: |
          linuxdeploy --appdir=AppDir --executable=build/myapp --output=appimage

      # Package on macOS with macdeployqt
      - name: Package application on macOS
        if: runner.os == 'macOS'
        run: |
          /usr/local/opt/qt@6.8/bin/macdeployqt build/myapp.app

      # Package on Windows with windeployqt
      - name: Package application on Windows
        if: runner.os == 'Windows'
        run: |
          C:\Qt\6.8.0\msvc2019_64\bin\windeployqt.exe build\myapp.exe

      # Upload artifact (all platforms)
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: myapp-${{ matrix.os }}
          path: |
            build/myapp*   # Binary files (exe, appimage, etc.)
            build/*.dll    # Windows DLLs
            build/*.so     # Linux shared libraries
            build/*.dylib  # macOS dynamic libraries
